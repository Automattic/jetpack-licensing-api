# TODO: remove automocking server.
# TODO: update externalDocs.
# TODO: update contact email
# TODO: update the jetpack security component to reflect how the plugin will authenticate requests to this API.

openapi: 3.0.0

info:
  description: |
    This is the Jetpack Start Licensing API.
  version: "1.0.0"
  title: Jetpack Start Licensing API
  termsOfService: 'http://example.org/'
  contact:
    email: atanas.angelov@automattic.com
  license:
    name: GPL 2.0
    url: 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html'

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/atanas-dev-org/licensing/1.0.0
  - url: 'https://petstore.swagger.io/v2'

tags:
  - name: license
    description: Everything regarding licenses.

paths:
  /license:
    get:
      tags:
        - license
      summary: Get the status of a license.
      operationId: licenseStatus
      parameters:
        - name: license_key
          description: Unique license key.
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/LicenseKey'
      security:
        - partner_token: []
      responses:
        '200':
          description: OK. Response body contains the license.
          headers:
            Request-Id:
              $ref: '#/components/headers/Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '403':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '509':
          $ref: '#/components/responses/RateLimited'

    post:
      tags:
        - license
      summary: Issue a new license.
      operationId: issueLicense
      security:
        - partner_token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  description: Product the license is for.
                  type: string
                  enum:
                    - 'free'
                    - 'personal'
                    - 'premium'
                    - 'professional'
                    - 'jetpack-backup-daily'
                    - 'jetpack-backup-realtime'
                    - 'jetpack-scan'
                    - 'jetpack-anti-spam'
      responses:
        '200':
          description: OK. Response body contains the newly issued license.
          headers:
            Request-Id:
              $ref: '#/components/headers/Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '403':
          $ref: '#/components/responses/InvalidRequest'

    delete:
      tags:
        - license
      summary: Revoke a license permanently.
      operationId: revokeLicense
      parameters:
        - name: license_key
          description: Unique license key.
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/LicenseKey'
      security:
        - partner_token: []
      responses:
        '200':
          description: OK. Response body contains the license that was revoked.
          headers:
            Request-Id:
              $ref: '#/components/headers/Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '403':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /license/site:
    parameters:
      - name: license_key
        description: Unique license key.
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/LicenseKey'

    get:
      tags:
        - license
      summary: Get the site a license is being used on.
      operationId: licenseSiteStatus
      security:
        - partner_token: []
      responses:
        '200':
          description: OK. Response body contains the license site.
          headers:
            Request-Id:
              $ref: '#/components/headers/Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '403':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - license
      summary: Update the site a license is being used on.
      operationId: updateLicenseSite
      security:
        - partner_token: []
        - jetpack: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  $ref: '#/components/schemas/SiteUrl'
      responses:
        '200':
          description: OK. Response body contains the updated license site.
          headers:
            Request-Id:
              $ref: '#/components/headers/Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '403':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'

externalDocs:
  description: API documentation for host partners.
  url: 'https://github.com/Automattic/host-partner-documentation'

components:
  schemas:
    Message:
      type: object
      properties:
        code:
          type: string
          example: 'api_message_code'
        message:
          type: string
          example: 'Human-readable API message.'

    License:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/LicenseId'
        key:
          $ref: '#/components/schemas/LicenseKey'
        issued_at:
          type: string
          format: date-time
        revoked_at:
          type: string
          format: date-time

    LicenseId:
      type: integer
      format: int64
      example: 12345

    LicenseKey:
      type: string
      example: 'TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQu'

    Site:
      type: object
      properties:
        url:
          $ref: '#/components/schemas/SiteUrl'
    SiteUrl:
      type: string
      example: 'http://example.org/'

  headers:
    Request-Id:
      description: Unique request id.
      schema:
        type: string
      example: 'TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQu'

  responses:
    NotFound:
      description: Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
      headers:
        Request-Id:
          $ref: '#/components/headers/Request-Id'

    InvalidRequest:
      description: Invalid input or insufficient permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
      headers:
        Request-Id:
          $ref: '#/components/headers/Request-Id'

    RateLimited:
      description: Bandwidth Limit Exceeded.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
      headers:
        Request-Id:
          $ref: '#/components/headers/Request-Id'

  securitySchemes:
    partner_token:
      type: http
      description: Generate a bearer token via https://public-api.wordpress.com/oauth2/token
      scheme: bearer

    jetpack:
      type: http
      description: TODO this authentication method depends on how Jetpack the plugin can make authenticated requests to this API.
      scheme: bearer
