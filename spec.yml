openapi: 3.0.0

info:
  description: |
    A set of endpoints that are meant for Jetpack partners to manage licenses and connect sites.
  version: 1.3.0
  title: Jetpack Licensing API
  contact:
    email: partners@jetpack.com
  license:
    name: GPL 2.0
    url: 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html'

tags:
  - name: license
    description: Everything regarding licenses.

servers:
  - url: https://public-api.wordpress.com/wpcom/v2/jetpack-licensing
    description: WordPress.com API

paths:
  /license:
    get:
      tags:
        - license
      summary: Get the status of a license.
      operationId: licenseStatus
      parameters:
        - name: license_key
          description: Unique license key.
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/LicenseKey'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK. Response body contains the license.
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - license
      summary: Issue a new license.
      operationId: issueLicense
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  description: Product the license is for.
                  type: string
                  enum:
                    - 'free'
                    - 'personal'
                    - 'premium'
                    - 'professional'
                    - 'jetpack-backup-daily'
                    - 'jetpack-backup-realtime'
                    - 'jetpack-scan'
                    - 'jetpack-anti-spam'
                    - 'jetpack-security-daily'
                    - 'jetpack-security-realtime'
                    - 'jetpack-complete'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK. Response body contains the newly issued license.
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

    delete:
      tags:
        - license
      summary: Revoke a license permanently.
      operationId: revokeLicense
      parameters:
        - name: license_key
          description: Unique license key.
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/LicenseKey'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK. Response body contains the license that was revoked.
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /license/{license_key}/site:
    post:
      tags:
        - license
      summary: Attach a license to a site.
      description: Attaching a license to a site means that the site will start benefitting from the Jetpack Product associated with the license.
      operationId: attachLicense
      parameters:
        - name: license_key
          description: Unique license key.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/LicenseKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                site:
                  description: The website the license should be attached to.
                  oneOf:
                    - type: string
                    - type: integer
            examples:
              siteUrl:
                summary: Absolute URL
                description: The absolute URL of a connected Jetpack site.
                value:
                  site: https://example.com/subdir/
              blogId:
                summary: Blog ID
                description: The blog ID is a unique identifier for specific sites.
                value:
                  site: 1234
              formattedSiteUrl:
                summary: Formatted URL
                description: The site's domain and path where / in the path is replaced with "::".
                value:
                  site: example.com::subdir
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK. Response body contains the license that was detached.
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

    delete:
      tags:
        - license
      summary: Detach a license from a site.
      description: Detaching a license from a site means that it can be applied to the same or a new site again. This can be useful if a site is copied from staging to production and you wish to move the license.
      operationId: detachLicense
      parameters:
        - name: license_key
          description: Unique license key.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/LicenseKey'
        - name: cancellation_email
          description: Determine if we should send a cancellation email to the end-customer. It is considered good practice to only disable this email if a license is e.g. being moved from a staging site to a production site.
          in: query
          required: false
          schema:
            type: integer
            default: 1
            example: 0
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK. Response body contains the license that was detached.
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /product-families:
    get:
      tags:
        - product-families
      summary: Get all the available product families and their products.
      operationId: getProductFamilies
      responses:
        '200':
          description: OK. Response body contains product families.
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductFamily'
  /partner:
    get:
      tags:
        - partner
      summary: Get the partner and its keys associated with the user making the request. Partner key tokens are to be used for authentication in all other Licensing endpoints.
      operationId: getPartner
      security:
        - WPCOMKeyAuth: []
      responses:
        '200':
          description: OK. Response body contains a partner and its keys.
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
        '403':
          $ref: '#/components/responses/Forbidden'

  /site-connection:
    post:
      tags:
        - site-connection
      summary: Connects a Jetpack site without requiring a WordPress user.
      description: With this endpoint we don't require a WordPress.com account to make the connection. We do still need the local WordPress install user. If this endpoint returns 200 then you can safely assume everything worked. This is because if a site has already been connected and this endpoint is called again, the return code will change to reflect this but the status code will always be 200. Multiple calls for the same site are safe and will not have any detrimental effects. This endpoint returns the connected site's blog_id for reference and debugging. While the blog_id is not required for anything else involving a site connection, it is wise to log it somewhere in case you need to contact support.
      operationId: postSiteConnection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  description: The full URL, (including protocol) of the site to connect. If WordPress is installed in a subdirectory then this should be included as part of the URL as well.
                  type: string
                  example: https://example.com/site
                local_user:
                  description: The ID, login, or email for the WordPress local user (not the WordPress.com user). A very common case would be a brand new WordPress installation where there is only one admin user. In such cases you can pass 1 for this.
                  oneOf:
                    - type: integer
                    - type: string
                  example: 1
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK. Response body contains a response code and the newly created blog_id.
          headers:
            X-Jetpack-Request-Id:
              $ref: '#/components/headers/X-Jetpack-Request-Id'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: success
                  blog_id:
                    type: integer
                    example: 123456789

externalDocs:
  description: Learn more about integrating with this API.
  url: https://github.com/Automattic/jetpack-licensing-api/integration-docs/

components:
  schemas:
    Message:
      type: object
      properties:
        code:
          type: string
          example: 'api_message_code'
        message:
          type: string
          example: 'Human-readable API message.'

    License:
      type: object
      properties:
        license_id:
          $ref: '#/components/schemas/LicenseId'
        license_key:
          $ref: '#/components/schemas/LicenseKey'
        issued_at:
          type: string
          format: date-time
        revoked_at:
          type: string
          format: date-time

    ProductFamily:
      type: object
      properties:
        name:
          type: string
          example: "Jetpack Backup"
        slug:
          type: string
          example: "jetpack-backup"
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductFamilyProduct'

    ProductFamilyProduct:
      type: object
      properties:
        name:
          type: string
          example: "Jetpack Backup (Daily)"
        slug:
          type: string
          example: "jetpack-backup-daily"

    Partner:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 12345
        name:
          type: string
          example: Hello World Hosting
        slug:
          type: string
          example: hello-world-hosting
        keys:
          type: array
          items:
            $ref: '#/components/schemas/PartnerKey'

    PartnerKey:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 12345
        name:
          type: string
          example: Hello World
        oauth2_token:
          type: string
          example: 'TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQu'
          description: Token to be used for authentication in all other Licensing endpoints.
        disabled_on:
          type: string
          nullable: true

    LicenseId:
      type: integer
      format: int64
      example: 12345

    LicenseKey:
      type: string
      example: 'TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQu'

  headers:
    X-Jetpack-Request-Id:
      description: Unique request id.
      schema:
        type: string
      example: 'TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQu'

  responses:
    NotFound:
      description: Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
      headers:
        X-Jetpack-Request-Id:
          $ref: '#/components/headers/X-Jetpack-Request-Id'

    BadRequest:
      description: Invalid input.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
      headers:
        X-Jetpack-Request-Id:
          $ref: '#/components/headers/X-Jetpack-Request-Id'

    Forbidden:
      description: Insufficient permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
      headers:
        X-Jetpack-Request-Id:
          $ref: '#/components/headers/X-Jetpack-Request-Id'

    RateLimited:
      description: Bandwidth Limit Exceeded.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
      headers:
        X-Jetpack-Request-Id:
          $ref: '#/components/headers/X-Jetpack-Request-Id'

  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: OAuth2
      description: A token will be provided to you when you register as a partner.
    WPCOMKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: OAuth2
      description: A token generated by the WordPress.com OAuth flow.
